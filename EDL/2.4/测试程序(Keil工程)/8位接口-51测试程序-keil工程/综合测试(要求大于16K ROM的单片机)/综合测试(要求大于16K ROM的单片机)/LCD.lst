C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:45:47 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.obj
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE LCD\LCD.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\LCD.lst) TABS(2) OBJEC
                    -T(LCD.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #include <font\font.h>
   4          #include <sys\sys.h>
   5          #include <lcd\lcd.h>
   6          /* http://ttmcu.taobao.com 
   7          代码测试环境:单片机STC12LE5A60S2,晶振33M  单片机工作电压3.3V
   8          程序默认IO连接方式：
   9          控制线：RS-P3^5;    WR-P3^6;   RD-P3^7;   CS-P1^0;   REST-P1^2;
  10          数据线: DB0-DB7悬空  DB8-DB15依次连接P2^0-P2^7;
  11          触摸功能连接方式：(不使用触摸可不连接)
  12          T_CLK-P1^7;  T_CS-P1^4;  T_DIN-P3^0;  T_OUT-P3^1;  T_IRQ-P3^4;
  13          */
  14          u16 BACK_COLOR, POINT_COLOR;   //背景色，画笔色
  15          void LCD_Writ_COLORBus(char VH,char VL)   //颜色数据写入总线
  16          {
  17   1        LCD_DataPortH=VH; 
  18   1        LCD_WR=0;
  19   1        LCD_WR=1; 
  20   1        LCD_DataPortH=VL; 
  21   1        LCD_WR=0;
  22   1        LCD_WR=1; 
  23   1      }
  24          void LCD_Writ_COMBus(char da)   //寄存器数据写入总线
  25          {
  26   1        LCD_DataPortH=da; 
  27   1        LCD_WR=0;
  28   1        LCD_WR=1; 
  29   1      }
  30          void LCD_WR_DATA8(char VH,char VL) //发送颜色数据-8位参数
  31          {
  32   1        LCD_RS=1;
  33   1        LCD_Writ_COLORBus(VH,VL);
  34   1      }  
  35          void LCD_WR_DATA(int da) //发送颜色数据-16位参数
  36          {
  37   1        LCD_RS=1;
  38   1        LCD_Writ_COLORBus(da>>8,da);
  39   1      }   
  40          void LCD_WR_COMDATA(char da)//发送寄存器数据
  41          {
  42   1        LCD_RS=1;
  43   1        LCD_Writ_COMBus(da);
  44   1      } 
  45          void LCD_WR_REG(char da)   //写寄存器
  46          { 
  47   1        LCD_RS=0;
  48   1        LCD_Writ_COMBus(da); //寄存器数据写入总线
  49   1      }
  50           void LCD_WR_REG_DATA(char reg,char da)
  51          {
  52   1        LCD_WR_REG(reg);
  53   1        LCD_WR_COMDATA(da);
  54   1      }
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:45:47 PAGE 2   

  55          void Address_set(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
  56          { 
  57   1         LCD_WR_REG(0x2A);
  58   1         LCD_WR_COMDATA(x1>>8);
  59   1         LCD_WR_COMDATA(x1);
  60   1         LCD_WR_COMDATA(x2>>8);
  61   1         LCD_WR_COMDATA(x2);
  62   1        
  63   1         LCD_WR_REG(0x2B);
  64   1         LCD_WR_COMDATA(y1>>8);
  65   1         LCD_WR_COMDATA(y1);
  66   1         LCD_WR_COMDATA(y2>>8);
  67   1         LCD_WR_COMDATA(y2);  
  68   1         LCD_WR_REG(0x2c);                 
  69   1      }
  70          void Lcd_Init(void)
  71          {
  72   1      
  73   1      //调用一次这些函数，免得编译的时候提示警告
  74   1          LCD_CS =1;
  75   1        if(LCD_CS==0)
  76   1        {
  77   2           LCD_WR_REG_DATA(0,0);
  78   2           LCD_ShowString(0,0," ");
  79   2           LCD_ShowNum(0,0,0,0);
  80   2           LCD_Show2Num(0,0,0,0);
  81   2           LCD_DrawPoint_big(0,0);
  82   2           LCD_DrawRectangle(0,0,0,0);
  83   2           Draw_Circle(0,0,0);
  84   2         }
  85   1        LCD_RD=1;
  86   1        LCD_WR=1;
  87   1        LCD_REST=0;
  88   1        delayms(20);  //此处保证要有5ms以上才能保证复位稳定,推荐20ms
  89   1        LCD_REST=1; 
  90   1        delayms(20);  //此处保证要有5ms以上才能保证复位稳定,推荐20ms    
  91   1        LCD_CS =0;  //打开片选使能
  92   1      
  93   1        //************* Start Initial Sequence **********//
  94   1      LCD_WR_REG(0xcf); 
  95   1      LCD_WR_COMDATA(0x00);
  96   1      LCD_WR_COMDATA(0xc1);
  97   1      LCD_WR_COMDATA(0x30);
  98   1      
  99   1      LCD_WR_REG(0xed); 
 100   1      LCD_WR_COMDATA(0x64);
 101   1      LCD_WR_COMDATA(0x03);
 102   1      LCD_WR_COMDATA(0x12);
 103   1      LCD_WR_COMDATA(0x81);
 104   1      
 105   1      LCD_WR_REG(0xcb); 
 106   1      LCD_WR_COMDATA(0x39);
 107   1      LCD_WR_COMDATA(0x2c);
 108   1      LCD_WR_COMDATA(0x00);
 109   1      LCD_WR_COMDATA(0x34);
 110   1      LCD_WR_COMDATA(0x02);
 111   1      
 112   1      LCD_WR_REG(0xea); 
 113   1      LCD_WR_COMDATA(0x00);
 114   1      LCD_WR_COMDATA(0x00);
 115   1      
 116   1      LCD_WR_REG(0xe8); 
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:45:47 PAGE 3   

 117   1      LCD_WR_COMDATA(0x85);
 118   1      LCD_WR_COMDATA(0x10);
 119   1      LCD_WR_COMDATA(0x79);
 120   1      
 121   1      LCD_WR_REG(0xC0); //Power control
 122   1      LCD_WR_COMDATA(0x23); //VRH[5:0]
 123   1      
 124   1      LCD_WR_REG(0xC1); //Power control
 125   1      LCD_WR_COMDATA(0x11); //SAP[2:0];BT[3:0]
 126   1      
 127   1      LCD_WR_REG(0xC2);
 128   1      LCD_WR_COMDATA(0x11);
 129   1      
 130   1      LCD_WR_REG(0xC5); //VCM control
 131   1      LCD_WR_COMDATA(0x3d);
 132   1      LCD_WR_COMDATA(0x30);
 133   1      
 134   1      LCD_WR_REG(0xc7); 
 135   1      LCD_WR_COMDATA(0xaa);
 136   1      
 137   1      LCD_WR_REG(0x3A); 
 138   1      LCD_WR_COMDATA(0x55);
 139   1      
 140   1      LCD_WR_REG(0x36); // Memory Access Control
 141   1      LCD_WR_COMDATA(0x08);
 142   1      
 143   1      LCD_WR_REG(0xB1); // Frame Rate Control
 144   1      LCD_WR_COMDATA(0x00);
 145   1      LCD_WR_COMDATA(0x11);
 146   1      
 147   1      LCD_WR_REG(0xB6); // Display Function Control
 148   1      LCD_WR_COMDATA(0x0a);
 149   1      LCD_WR_COMDATA(0xa2);
 150   1      
 151   1      LCD_WR_REG(0xF2); // 3Gamma Function Disable
 152   1      LCD_WR_COMDATA(0x00);
 153   1      
 154   1      LCD_WR_REG(0xF7);
 155   1      LCD_WR_COMDATA(0x20);
 156   1      
 157   1      LCD_WR_REG(0xF1);
 158   1      LCD_WR_COMDATA(0x01);
 159   1      LCD_WR_COMDATA(0x30);
 160   1      
 161   1      LCD_WR_REG(0x26); //Gamma curve selected
 162   1      LCD_WR_COMDATA(0x01);
 163   1      
 164   1      LCD_WR_REG(0xE0); //Set Gamma
 165   1      LCD_WR_COMDATA(0x0f);
 166   1      LCD_WR_COMDATA(0x3f);
 167   1      LCD_WR_COMDATA(0x2f);
 168   1      LCD_WR_COMDATA(0x0c);
 169   1      LCD_WR_COMDATA(0x10);
 170   1      LCD_WR_COMDATA(0x0a);
 171   1      LCD_WR_COMDATA(0x53);
 172   1      LCD_WR_COMDATA(0xd5);
 173   1      LCD_WR_COMDATA(0x40);
 174   1      LCD_WR_COMDATA(0x0a);
 175   1      LCD_WR_COMDATA(0x13);
 176   1      LCD_WR_COMDATA(0x03);
 177   1      LCD_WR_COMDATA(0x08);
 178   1      LCD_WR_COMDATA(0x03);
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:45:47 PAGE 4   

 179   1      LCD_WR_COMDATA(0x00);
 180   1      
 181   1      LCD_WR_REG(0xE1); //Set Gamma
 182   1      LCD_WR_COMDATA(0x00);
 183   1      LCD_WR_COMDATA(0x00);
 184   1      LCD_WR_COMDATA(0x10);
 185   1      LCD_WR_COMDATA(0x03);
 186   1      LCD_WR_COMDATA(0x0f);
 187   1      LCD_WR_COMDATA(0x05);
 188   1      LCD_WR_COMDATA(0x2c);
 189   1      LCD_WR_COMDATA(0xa2);
 190   1      LCD_WR_COMDATA(0x3f);
 191   1      LCD_WR_COMDATA(0x05);
 192   1      LCD_WR_COMDATA(0x0e);
 193   1      LCD_WR_COMDATA(0x0c);
 194   1      LCD_WR_COMDATA(0x37);
 195   1      LCD_WR_COMDATA(0x3c);
 196   1      LCD_WR_COMDATA(0x0F);
 197   1      LCD_WR_REG(0x11); //Exit Sleep
 198   1      delayms(80);//此处必须要延时80ms或者更多
 199   1      LCD_WR_REG(0x29); //display on
 200   1      }
 201          //清屏函数
 202          //Color:要清屏的填充色
 203          void LCD_Clear(u16 Color)
 204          {
 205   1        u8 VH,VL;
 206   1        u16 i,j;
 207   1        VH=Color>>8;
 208   1        VL=Color; 
 209   1        Address_set(0,0,LCD_W-1,LCD_H-1);
 210   1          for(i=0;i<LCD_W;i++)
 211   1         {
 212   2          for (j=0;j<LCD_H;j++)
 213   2            {
 214   3                 LCD_WR_DATA8(VH,VL);
 215   3            }
 216   2      
 217   2          }
 218   1      }
 219          //在指定位置显示一个汉字(32*33大小)
 220          //dcolor为内容颜色，gbcolor为背静颜色
 221          void showhanzi(unsigned int x,unsigned int y,unsigned char index) 
 222          {  
 223   1        unsigned char i,j;
 224   1        unsigned char *temp=hanzi;    
 225   1          Address_set(x,y,x+31,y+31); //设置区域      
 226   1        temp+=index*128;  
 227   1        for(j=0;j<128;j++)
 228   1        {
 229   2          for(i=0;i<8;i++)
 230   2          {          
 231   3            if((*temp&(1<<i))!=0)
 232   3            {
 233   4              LCD_WR_DATA(POINT_COLOR);
 234   4            } 
 235   3            else
 236   3            {
 237   4              LCD_WR_DATA(BACK_COLOR);
 238   4            }   
 239   3          }
 240   2          temp++;
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:45:47 PAGE 5   

 241   2         }
 242   1      }
 243          //画点
 244          //POINT_COLOR:此点的颜色
 245          void LCD_DrawPoint(u16 x,u16 y)
 246          {
 247   1        Address_set(x,y,x,y);//设置光标位置 
 248   1        LCD_WR_DATA(POINT_COLOR);       
 249   1      }    
 250          //画一个大点
 251          //POINT_COLOR:此点的颜色
 252          void LCD_DrawPoint_big(u16 x,u16 y)
 253          {
 254   1        LCD_Fill(x-1,y-1,x+1,y+1,POINT_COLOR);
 255   1      } 
 256          //在指定区域内填充指定颜色
 257          //区域大小:
 258          //  (xend-xsta)*(yend-ysta)
 259          void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
 260          {          
 261   1        u16 i,j; 
 262   1        Address_set(xsta,ysta,xend,yend);      //设置光标位置 
 263   1        for(i=ysta;i<=yend;i++)
 264   1        {                               
 265   2          for(j=xsta;j<=xend;j++)LCD_WR_DATA(color);//设置光标位置      
 266   2        }                   
 267   1      }  
 268          //画线
 269          //x1,y1:起点坐标
 270          //x2,y2:终点坐标  
 271          void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
 272          {
 273   1        u16 t; 
 274   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
 275   1        int incx,incy,uRow,uCol; 
 276   1      
 277   1        delta_x=x2-x1; //计算坐标增量 
 278   1        delta_y=y2-y1; 
 279   1        uRow=x1; 
 280   1        uCol=y1; 
 281   1        if(delta_x>0)incx=1; //设置单步方向 
 282   1        else if(delta_x==0)incx=0;//垂直线 
 283   1        else {incx=-1;delta_x=-delta_x;} 
 284   1        if(delta_y>0)incy=1; 
 285   1        else if(delta_y==0)incy=0;//水平线 
 286   1        else{incy=-1;delta_y=-delta_y;} 
 287   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 288   1        else distance=delta_y; 
 289   1        for(t=0;t<=distance+1;t++ )//画线输出 
 290   1        {  
 291   2          LCD_DrawPoint(uRow,uCol);//画点 
 292   2          xerr+=delta_x ; 
 293   2          yerr+=delta_y ; 
 294   2          if(xerr>distance) 
 295   2          { 
 296   3            xerr-=distance; 
 297   3            uRow+=incx; 
 298   3          } 
 299   2          if(yerr>distance) 
 300   2          { 
 301   3            yerr-=distance; 
 302   3            uCol+=incy; 
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:45:47 PAGE 6   

 303   3          } 
 304   2        }  
 305   1      }    
 306          //画矩形
 307          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
 308          {
 309   1        LCD_DrawLine(x1,y1,x2,y1);
 310   1        LCD_DrawLine(x1,y1,x1,y2);
 311   1        LCD_DrawLine(x1,y2,x2,y2);
 312   1        LCD_DrawLine(x2,y1,x2,y2);
 313   1      }
 314          //在指定位置画一个指定大小的圆
 315          //(x,y):中心点
 316          //r    :半径
 317          void Draw_Circle(u16 x0,u16 y0,u8 r)
 318          {
 319   1        int a,b;
 320   1        int di;
 321   1        a=0;b=r;    
 322   1        di=3-(r<<1);             //判断下个点位置的标志
 323   1        while(a<=b)
 324   1        {
 325   2          LCD_DrawPoint(x0-b,y0-a);             //3           
 326   2          LCD_DrawPoint(x0+b,y0-a);             //0           
 327   2          LCD_DrawPoint(x0-a,y0+b);             //1       
 328   2          LCD_DrawPoint(x0-b,y0-a);             //7           
 329   2          LCD_DrawPoint(x0-a,y0-b);             //2             
 330   2          LCD_DrawPoint(x0+b,y0+a);             //4               
 331   2          LCD_DrawPoint(x0+a,y0-b);             //5
 332   2          LCD_DrawPoint(x0+a,y0+b);             //6 
 333   2          LCD_DrawPoint(x0-b,y0+a);             
 334   2          a++;
 335   2          //使用Bresenham算法画圆     
 336   2          if(di<0)di +=4*a+6;   
 337   2          else
 338   2          {
 339   3            di+=10+4*(a-b);   
 340   3            b--;
 341   3          } 
 342   2          LCD_DrawPoint(x0+a,y0+b);
 343   2        }
 344   1      } 
 345          //在指定位置显示一个字符
 346          
 347          //num:要显示的字符:" "--->"~"
 348          //mode:叠加方式(1)还是非叠加方式(0)
 349          //在指定位置显示一个字符
 350          
 351          //num:要显示的字符:" "--->"~"
 352          
 353          //mode:叠加方式(1)还是非叠加方式(0)
 354          void LCD_ShowChar(u16 x,u16 y,u8 num,u8 mode)
 355          {
 356   1          u8 temp;
 357   1          u8 pos,t;
 358   1        u16 x0=x;
 359   1        u16 colortemp=POINT_COLOR;      
 360   1          if(x>LCD_W-16||y>LCD_H-16)return;     
 361   1        //设置窗口       
 362   1        num=num-' ';//得到偏移后的值
 363   1        Address_set(x,y,x+8-1,y+16-1);      //设置光标位置 
 364   1        if(!mode) //非叠加方式
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:45:47 PAGE 7   

 365   1        {
 366   2          for(pos=0;pos<16;pos++)
 367   2          { 
 368   3            temp=asc2_1608[(u16)num*16+pos];     //调用1608字体
 369   3            for(t=0;t<8;t++)
 370   3              {                 
 371   4                  if(temp&0x01)POINT_COLOR=colortemp;
 372   4              else POINT_COLOR=BACK_COLOR;
 373   4              LCD_WR_DATA(POINT_COLOR); 
 374   4              temp>>=1; 
 375   4              x++;
 376   4              }
 377   3            x=x0;
 378   3            y++;
 379   3          } 
 380   2        }else//叠加方式
 381   1        {
 382   2          for(pos=0;pos<16;pos++)
 383   2          {
 384   3              temp=asc2_1608[(u16)num*16+pos];     //调用1608字体
 385   3            for(t=0;t<8;t++)
 386   3              {                 
 387   4                  if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//画一个点     
 388   4                  temp>>=1; 
 389   4              }
 390   3          }
 391   2        }
 392   1        POINT_COLOR=colortemp;                
 393   1      }   
 394          //m^n函数
 395          u32 mypow(u8 m,u8 n)
 396          {
 397   1        u32 result=1;  
 398   1        while(n--)result*=m;    
 399   1        return result;
 400   1      }      
 401          //显示2个数字
 402          //x,y :起点坐标  
 403          //len :数字的位数
 404          //color:颜色
 405          //num:数值(0~4294967295); 
 406          void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len)
 407          {           
 408   1        u8 t,temp;
 409   1        u8 enshow=0;
 410   1        num=(u16)num;
 411   1        for(t=0;t<len;t++)
 412   1        {
 413   2          temp=(num/mypow(10,len-t-1))%10;
 414   2          if(enshow==0&&t<(len-1))
 415   2          {
 416   3            if(temp==0)
 417   3            {
 418   4              LCD_ShowChar(x+8*t,y,' ',0);
 419   4              continue;
 420   4            }else enshow=1; 
 421   3             
 422   3          }
 423   2          LCD_ShowChar(x+8*t,y,temp+48,0); 
 424   2        }
 425   1      } 
 426          //显示2个数字
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:45:47 PAGE 8   

 427          //x,y:起点坐标
 428          //num:数值(0~99);  
 429          void LCD_Show2Num(u16 x,u16 y,u16 num,u8 len)
 430          {           
 431   1        u8 t,temp;               
 432   1        for(t=0;t<len;t++)
 433   1        {
 434   2          temp=(num/mypow(10,len-t-1))%10;
 435   2          LCD_ShowChar(x+8*t,y,temp+'0',0); 
 436   2        }
 437   1      } 
 438          //显示字符串
 439          //x,y:起点坐标  
 440          //*p:字符串起始地址
 441          //用16字体
 442          void LCD_ShowString(u16 x,u16 y,const u8 *p)
 443          {         
 444   1          while(*p!='\0')
 445   1          {       
 446   2              if(x>LCD_W-16){x=0;y+=16;}
 447   2              if(y>LCD_H-16){y=x=0;LCD_Clear(RED);}
 448   2              LCD_ShowChar(x,y,*p,0);
 449   2              x+=8;
 450   2              p++;
 451   2          }  
 452   1      }
 453          
 454          
 455          
 456          
 457          
 458          
 459          
 460          
 461          
 462          
 463          
 464          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3402    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =      4     125
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
