C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:52:18 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.obj
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE LCD\LCD.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\LCD.lst) TABS(2) OBJEC
                    -T(LCD.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #include <font\font.h>
   4          #include <sys\sys.h>
   5          #include <lcd\lcd.h>
   6          /* http://ttmcu.taobao.com 
   7          代码测试环境:单片机STC12LE5A60S2,晶振33M  单片机工作电压3.3V
   8          程序默认IO连接方式：
   9          控制线：RS-P3^5;    WR-P3^6;   RD-P3^7;   CS-P1^0;   REST-P1^2;
  10          数据线: DB0-DB7依次连接P0^0-P0^7;  DB8-DB15依次连接P2^0-P2^7;
  11          触摸功能连接方式：(不使用触摸可不连接)
  12          T_CLK-P1^7;  T_CS-P1^4;  T_DIN-P3^0;  T_OUT-P3^1;  T_IRQ-P3^4;
  13          */
  14          u16 BACK_COLOR, POINT_COLOR;   //背景色，画笔色
  15          void LCD_Writ_Bus(char VH,char VL)   //并行数据写入函数
  16          {
  17   1        LCD_DataPortH=VH; 
  18   1        LCD_DataPortL=VL;   
  19   1        LCD_WR=0;
  20   1        LCD_WR=1; 
  21   1      }
  22          void LCD_WR_DATA8(char VH,char VL) //发送数据-8位参数
  23          {
  24   1          LCD_RS=1;
  25   1        LCD_Writ_Bus(VH,VL);
  26   1      }  
  27           void LCD_WR_DATA(int da)
  28          {
  29   1          LCD_RS=1;
  30   1        LCD_Writ_Bus(da>>8,da);
  31   1      }   
  32          void LCD_WR_REG(int da)  
  33          { 
  34   1          LCD_RS=0;
  35   1        LCD_Writ_Bus(da>>8,da);
  36   1      }
  37           void LCD_WR_REG_DATA(int reg,int da)
  38          {
  39   1          LCD_WR_REG(reg);
  40   1        LCD_WR_DATA(da);
  41   1      }
  42          void Address_set(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
  43          { 
  44   1         LCD_WR_REG(0x2A);
  45   1         LCD_WR_DATA(x1>>8);
  46   1         LCD_WR_DATA(x1);
  47   1         LCD_WR_DATA(x2>>8);
  48   1         LCD_WR_DATA(x2);
  49   1        
  50   1         LCD_WR_REG(0x2B);
  51   1         LCD_WR_DATA(y1>>8);
  52   1         LCD_WR_DATA(y1);
  53   1         LCD_WR_DATA(y2>>8);
  54   1         LCD_WR_DATA(y2); 
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:52:18 PAGE 2   

  55   1         LCD_WR_REG(0x2c);                       
  56   1      }
  57          void Lcd_Init(void)
  58          {
  59   1      
  60   1      //调用一次这些函数，免得编译的时候提示警告
  61   1          LCD_CS =1;
  62   1        if(LCD_CS==0)
  63   1        {
  64   2           LCD_WR_REG_DATA(0,0);
  65   2           LCD_ShowString(0,0," ");
  66   2           LCD_ShowNum(0,0,0,0);
  67   2           LCD_Show2Num(0,0,0,0);
  68   2           LCD_DrawPoint_big(0,0);
  69   2           LCD_DrawRectangle(0,0,0,0);
  70   2           Draw_Circle(0,0,0);
  71   2         }     
  72   1        LCD_RD=1;
  73   1        LCD_WR=1;
  74   1        LCD_REST=0;
  75   1        delayms(20);  //此处保证要有5ms以上才能保证复位稳定,推荐20ms
  76   1        LCD_REST=1; 
  77   1        delayms(20);  //此处保证要有5ms以上才能保证复位稳定,推荐20ms    
  78   1        LCD_CS =0;  //打开片选使能
  79   1      
  80   1       //************* Start Initial Sequence **********//
  81   1      LCD_WR_REG(0xcf); 
  82   1      LCD_WR_DATA(0x00);
  83   1      LCD_WR_DATA(0xc1);
  84   1      LCD_WR_DATA(0x30);
  85   1      
  86   1      LCD_WR_REG(0xed); 
  87   1      LCD_WR_DATA(0x64);
  88   1      LCD_WR_DATA(0x03);
  89   1      LCD_WR_DATA(0x12);
  90   1      LCD_WR_DATA(0x81);
  91   1      
  92   1      LCD_WR_REG(0xcb); 
  93   1      LCD_WR_DATA(0x39);
  94   1      LCD_WR_DATA(0x2c);
  95   1      LCD_WR_DATA(0x00);
  96   1      LCD_WR_DATA(0x34);
  97   1      LCD_WR_DATA(0x02);
  98   1      
  99   1      LCD_WR_REG(0xea); 
 100   1      LCD_WR_DATA(0x00);
 101   1      LCD_WR_DATA(0x00);
 102   1      
 103   1      LCD_WR_REG(0xe8); 
 104   1      LCD_WR_DATA(0x85);
 105   1      LCD_WR_DATA(0x10);
 106   1      LCD_WR_DATA(0x79);
 107   1      
 108   1      LCD_WR_REG(0xC0); //Power control
 109   1      LCD_WR_DATA(0x23); //VRH[5:0]
 110   1      
 111   1      LCD_WR_REG(0xC1); //Power control
 112   1      LCD_WR_DATA(0x11); //SAP[2:0];BT[3:0]
 113   1      
 114   1      LCD_WR_REG(0xC2);
 115   1      LCD_WR_DATA(0x11);
 116   1      
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:52:18 PAGE 3   

 117   1      LCD_WR_REG(0xC5); //VCM control
 118   1      LCD_WR_DATA(0x3d);
 119   1      LCD_WR_DATA(0x30);
 120   1      
 121   1      LCD_WR_REG(0xc7); 
 122   1      LCD_WR_DATA(0xaa);
 123   1      
 124   1      LCD_WR_REG(0x3A); 
 125   1      LCD_WR_DATA(0x55);
 126   1      
 127   1      LCD_WR_REG(0x36); // Memory Access Control
 128   1      LCD_WR_DATA(0x08);
 129   1      
 130   1      LCD_WR_REG(0xB1); // Frame Rate Control
 131   1      LCD_WR_DATA(0x00);
 132   1      LCD_WR_DATA(0x11);
 133   1      
 134   1      LCD_WR_REG(0xB6); // Display Function Control
 135   1      LCD_WR_DATA(0x0a);
 136   1      LCD_WR_DATA(0xa2);
 137   1      
 138   1      LCD_WR_REG(0xF2); // 3Gamma Function Disable
 139   1      LCD_WR_DATA(0x00);
 140   1      
 141   1      LCD_WR_REG(0xF7);
 142   1      LCD_WR_DATA(0x20);
 143   1      
 144   1      LCD_WR_REG(0xF1);
 145   1      LCD_WR_DATA(0x01);
 146   1      LCD_WR_DATA(0x30);
 147   1      
 148   1      LCD_WR_REG(0x26); //Gamma curve selected
 149   1      LCD_WR_DATA(0x01);
 150   1      
 151   1      LCD_WR_REG(0xE0); //Set Gamma
 152   1      LCD_WR_DATA(0x0f);
 153   1      LCD_WR_DATA(0x3f);
 154   1      LCD_WR_DATA(0x2f);
 155   1      LCD_WR_DATA(0x0c);
 156   1      LCD_WR_DATA(0x10);
 157   1      LCD_WR_DATA(0x0a);
 158   1      LCD_WR_DATA(0x53);
 159   1      LCD_WR_DATA(0xd5);
 160   1      LCD_WR_DATA(0x40);
 161   1      LCD_WR_DATA(0x0a);
 162   1      LCD_WR_DATA(0x13);
 163   1      LCD_WR_DATA(0x03);
 164   1      LCD_WR_DATA(0x08);
 165   1      LCD_WR_DATA(0x03);
 166   1      LCD_WR_DATA(0x00);
 167   1      
 168   1      LCD_WR_REG(0xE1); //Set Gamma
 169   1      LCD_WR_DATA(0x00);
 170   1      LCD_WR_DATA(0x00);
 171   1      LCD_WR_DATA(0x10);
 172   1      LCD_WR_DATA(0x03);
 173   1      LCD_WR_DATA(0x0f);
 174   1      LCD_WR_DATA(0x05);
 175   1      LCD_WR_DATA(0x2c);
 176   1      LCD_WR_DATA(0xa2);
 177   1      LCD_WR_DATA(0x3f);
 178   1      LCD_WR_DATA(0x05);
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:52:18 PAGE 4   

 179   1      LCD_WR_DATA(0x0e);
 180   1      LCD_WR_DATA(0x0c);
 181   1      LCD_WR_DATA(0x37);
 182   1      LCD_WR_DATA(0x3c);
 183   1      LCD_WR_DATA(0x0F);
 184   1      LCD_WR_REG(0x11); //Exit Sleep
 185   1      delayms(80);//此处必须要延时80ms或者更多
 186   1      LCD_WR_REG(0x29); //display on
 187   1      }
 188          //清屏函数
 189          //Color:要清屏的填充色
 190          void LCD_Clear(u16 Color)
 191          {
 192   1        u8 VH,VL;
 193   1        u16 i,j;
 194   1        VH=Color>>8;
 195   1        VL=Color; 
 196   1        Address_set(0,0,LCD_W-1,LCD_H-1);
 197   1          for(i=0;i<LCD_W;i++)
 198   1         {
 199   2          for (j=0;j<LCD_H;j++)
 200   2            {
 201   3                 LCD_WR_DATA8(VH,VL);
 202   3            }
 203   2      
 204   2          }
 205   1      }
 206          //在指定位置显示一个汉字(32*33大小)
 207          //dcolor为内容颜色，gbcolor为背静颜色
 208          void showhanzi(unsigned int x,unsigned int y,unsigned char index) 
 209          {  
 210   1        unsigned char i,j;
 211   1        unsigned char *temp=hanzi;    
 212   1          Address_set(x,y,x+31,y+31); //设置区域      
 213   1        temp+=index*128;  
 214   1        for(j=0;j<128;j++)
 215   1        {
 216   2          for(i=0;i<8;i++)
 217   2          {          
 218   3            if((*temp&(1<<i))!=0)
 219   3            {
 220   4              LCD_WR_DATA(POINT_COLOR);
 221   4            } 
 222   3            else
 223   3            {
 224   4              LCD_WR_DATA(BACK_COLOR);
 225   4            }   
 226   3          }
 227   2          temp++;
 228   2         }
 229   1      }
 230          //画点
 231          //POINT_COLOR:此点的颜色
 232          void LCD_DrawPoint(u16 x,u16 y)
 233          {
 234   1        Address_set(x,y,x,y);//设置光标位置 
 235   1        LCD_WR_DATA(POINT_COLOR);       
 236   1      }    
 237          //画一个大点
 238          //POINT_COLOR:此点的颜色
 239          void LCD_DrawPoint_big(u16 x,u16 y)
 240          {
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:52:18 PAGE 5   

 241   1        LCD_Fill(x-1,y-1,x+1,y+1,POINT_COLOR);
 242   1      } 
 243          //在指定区域内填充指定颜色
 244          //区域大小:
 245          //  (xend-xsta)*(yend-ysta)
 246          void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
 247          {          
 248   1        u16 i,j; 
 249   1        Address_set(xsta,ysta,xend,yend);      //设置光标位置 
 250   1        for(i=ysta;i<=yend;i++)
 251   1        {                               
 252   2          for(j=xsta;j<=xend;j++)LCD_WR_DATA(color);//设置光标位置      
 253   2        }                   
 254   1      }  
 255          //画线
 256          //x1,y1:起点坐标
 257          //x2,y2:终点坐标  
 258          void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
 259          {
 260   1        u16 t; 
 261   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
 262   1        int incx,incy,uRow,uCol; 
 263   1      
 264   1        delta_x=x2-x1; //计算坐标增量 
 265   1        delta_y=y2-y1; 
 266   1        uRow=x1; 
 267   1        uCol=y1; 
 268   1        if(delta_x>0)incx=1; //设置单步方向 
 269   1        else if(delta_x==0)incx=0;//垂直线 
 270   1        else {incx=-1;delta_x=-delta_x;} 
 271   1        if(delta_y>0)incy=1; 
 272   1        else if(delta_y==0)incy=0;//水平线 
 273   1        else{incy=-1;delta_y=-delta_y;} 
 274   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 275   1        else distance=delta_y; 
 276   1        for(t=0;t<=distance+1;t++ )//画线输出 
 277   1        {  
 278   2          LCD_DrawPoint(uRow,uCol);//画点 
 279   2          xerr+=delta_x ; 
 280   2          yerr+=delta_y ; 
 281   2          if(xerr>distance) 
 282   2          { 
 283   3            xerr-=distance; 
 284   3            uRow+=incx; 
 285   3          } 
 286   2          if(yerr>distance) 
 287   2          { 
 288   3            yerr-=distance; 
 289   3            uCol+=incy; 
 290   3          } 
 291   2        }  
 292   1      }    
 293          //画矩形
 294          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
 295          {
 296   1        LCD_DrawLine(x1,y1,x2,y1);
 297   1        LCD_DrawLine(x1,y1,x1,y2);
 298   1        LCD_DrawLine(x1,y2,x2,y2);
 299   1        LCD_DrawLine(x2,y1,x2,y2);
 300   1      }
 301          //在指定位置画一个指定大小的圆
 302          //(x,y):中心点
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:52:18 PAGE 6   

 303          //r    :半径
 304          void Draw_Circle(u16 x0,u16 y0,u8 r)
 305          {
 306   1        int a,b;
 307   1        int di;
 308   1        a=0;b=r;    
 309   1        di=3-(r<<1);             //判断下个点位置的标志
 310   1        while(a<=b)
 311   1        {
 312   2          LCD_DrawPoint(x0-b,y0-a);             //3           
 313   2          LCD_DrawPoint(x0+b,y0-a);             //0           
 314   2          LCD_DrawPoint(x0-a,y0+b);             //1       
 315   2          LCD_DrawPoint(x0-b,y0-a);             //7           
 316   2          LCD_DrawPoint(x0-a,y0-b);             //2             
 317   2          LCD_DrawPoint(x0+b,y0+a);             //4               
 318   2          LCD_DrawPoint(x0+a,y0-b);             //5
 319   2          LCD_DrawPoint(x0+a,y0+b);             //6 
 320   2          LCD_DrawPoint(x0-b,y0+a);             
 321   2          a++;
 322   2          //使用Bresenham算法画圆     
 323   2          if(di<0)di +=4*a+6;   
 324   2          else
 325   2          {
 326   3            di+=10+4*(a-b);   
 327   3            b--;
 328   3          } 
 329   2          LCD_DrawPoint(x0+a,y0+b);
 330   2        }
 331   1      } 
 332          //在指定位置显示一个字符
 333          
 334          //num:要显示的字符:" "--->"~"
 335          //mode:叠加方式(1)还是非叠加方式(0)
 336          //在指定位置显示一个字符
 337          
 338          //num:要显示的字符:" "--->"~"
 339          
 340          //mode:叠加方式(1)还是非叠加方式(0)
 341          void LCD_ShowChar(u16 x,u16 y,u8 num,u8 mode)
 342          {
 343   1          u8 temp;
 344   1          u8 pos,t;
 345   1        u16 x0=x;
 346   1        u16 colortemp=POINT_COLOR;      
 347   1          if(x>LCD_W-16||y>LCD_H-16)return;     
 348   1        //设置窗口       
 349   1        num=num-' ';//得到偏移后的值
 350   1        Address_set(x,y,x+8-1,y+16-1);      //设置光标位置 
 351   1        if(!mode) //非叠加方式
 352   1        {
 353   2          for(pos=0;pos<16;pos++)
 354   2          { 
 355   3            temp=asc2_1608[(u16)num*16+pos];     //调用1608字体
 356   3            for(t=0;t<8;t++)
 357   3              {                 
 358   4                  if(temp&0x01)POINT_COLOR=colortemp;
 359   4              else POINT_COLOR=BACK_COLOR;
 360   4              LCD_WR_DATA(POINT_COLOR); 
 361   4              temp>>=1; 
 362   4              x++;
 363   4              }
 364   3            x=x0;
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:52:18 PAGE 7   

 365   3            y++;
 366   3          } 
 367   2        }else//叠加方式
 368   1        {
 369   2          for(pos=0;pos<16;pos++)
 370   2          {
 371   3              temp=asc2_1608[(u16)num*16+pos];     //调用1608字体
 372   3            for(t=0;t<8;t++)
 373   3              {                 
 374   4                  if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//画一个点     
 375   4                  temp>>=1; 
 376   4              }
 377   3          }
 378   2        }
 379   1        POINT_COLOR=colortemp;                
 380   1      }   
 381          //m^n函数
 382          u32 mypow(u8 m,u8 n)
 383          {
 384   1        u32 result=1;  
 385   1        while(n--)result*=m;    
 386   1        return result;
 387   1      }      
 388          //显示2个数字
 389          //x,y :起点坐标  
 390          //len :数字的位数
 391          //color:颜色
 392          //num:数值(0~4294967295); 
 393          void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len)
 394          {           
 395   1        u8 t,temp;
 396   1        u8 enshow=0;
 397   1        num=(u16)num;
 398   1        for(t=0;t<len;t++)
 399   1        {
 400   2          temp=(num/mypow(10,len-t-1))%10;
 401   2          if(enshow==0&&t<(len-1))
 402   2          {
 403   3            if(temp==0)
 404   3            {
 405   4              LCD_ShowChar(x+8*t,y,' ',0);
 406   4              continue;
 407   4            }else enshow=1; 
 408   3             
 409   3          }
 410   2          LCD_ShowChar(x+8*t,y,temp+48,0); 
 411   2        }
 412   1      } 
 413          //显示2个数字
 414          //x,y:起点坐标
 415          //num:数值(0~99);  
 416          void LCD_Show2Num(u16 x,u16 y,u16 num,u8 len)
 417          {           
 418   1        u8 t,temp;               
 419   1        for(t=0;t<len;t++)
 420   1        {
 421   2          temp=(num/mypow(10,len-t-1))%10;
 422   2          LCD_ShowChar(x+8*t,y,temp+'0',0); 
 423   2        }
 424   1      } 
 425          //显示字符串
 426          //x,y:起点坐标  
C51 COMPILER V9.01   LCD                                                                   10/20/2015 14:52:18 PAGE 8   

 427          //*p:字符串起始地址
 428          //用16字体
 429          void LCD_ShowString(u16 x,u16 y,const u8 *p)
 430          {         
 431   1          while(*p!='\0')
 432   1          {       
 433   2              if(x>LCD_W-16){x=0;y+=16;}
 434   2              if(y>LCD_H-16){y=x=0;LCD_Clear(RED);}
 435   2              LCD_ShowChar(x,y,*p,0);
 436   2              x+=8;
 437   2              p++;
 438   2          }  
 439   1      }
 440          
 441          
 442          
 443          
 444          
 445          
 446          
 447          
 448          
 449          
 450          
 451          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3433    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =      4     125
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
